<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title>
    <%= title %>
  </title>
  <link rel="stylesheet" href="/styles/dashboard.css"> <!-- optional -->
  <style>
    :root {
  --primary: #2563eb;
  --primary-dark: #1746a0;
  --secondary: #f0f8ff;
  --accent: #3498db;
  --danger: #e74c3c;
  --danger-dark: #c0392b;
  --sidebar-bg: #2563eb;
  --sidebar-text: #fff;
  --card-bg: #fff;
  --card-radius: 18px;
  --shadow: 0 4px 16px rgba(37,99,235,0.08);
}

body {
  font-family: 'Segoe UI', Arial, sans-serif;
  margin: 0;
  background: var(--secondary);
  min-height: 100vh;
  display: flex;
}

.sidebar {
  width: 260px;
  max-width: 80vw;
  background-color: var(--sidebar-bg);
  color: var(--sidebar-text);
  height: 100vh;
  padding: 30px 24px 24px 24px;
  position: fixed;
  left: -100%;
  top: 0;
  font-size: 1.2rem;
  border-top-right-radius: var(--card-radius);
  border-bottom-right-radius: var(--card-radius);
  box-shadow: var(--shadow);
  transition: left 0.4s cubic-bezier(.4,2.08,.55,.44);
  z-index: 200;
}

.sidebar h2 {
  margin-bottom: 30px;
  font-size: 1.4rem;
  font-weight: bold;
  color: #fff;
}

.sidebar a {
  color: #fff;
  display: block;
  margin-bottom: 28px;
  text-decoration: none;
  font-weight: 500;
  border-radius: 8px;
  padding: 8px 10px;
  transition: background 0.2s;
}

.sidebar a:hover {
  background: rgba(255,255,255,0.10);
}

.sidebar-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  height: 70px;
  margin-bottom: 32px;
}

#cancelSidebar-button img {
  height: 32px;
  cursor: pointer;
  filter: invert(1);
  opacity: 0.8;
  transition: opacity 0.2s;
}
#cancelSidebar-button img:hover {
  opacity: 1;
}

.main-content {
  flex: 1;
  padding: 32px 5vw 32px 5vw;
  margin-left: 0;
  min-width: 0;
  transition: margin-left 0.4s;
}

.nav {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2.5rem;
}

.app {
  display: flex;
  gap: 28px;
  align-items: center;
  padding-right: 10px;
}

.app h3 {
  color: var(--primary);
  font-size: 1.25rem;
  font-weight: bold;
  margin: 0;
  letter-spacing: -1px;
}

.app a img {
  height: 36px;
  filter: brightness(0.9) saturate(1.2);
}

#ham {
  display: inline-block;
  cursor: pointer;
  background: #fff;
  border-radius: 10px;
  box-shadow: var(--shadow);
  padding: 5px;
  transition: box-shadow 0.2s;
}
#ham:hover {
  box-shadow: 0 2px 8px rgba(37,99,235,0.15);
}

.main-content h1 {
  font-size: 2rem;
  color: var(--primary);
  font-weight: bold;
  margin-bottom: 2rem;
}

.card {
  width: 100%;
  max-width: 700px;
  background-color: var(--card-bg);
  padding: 24px 20px 20px 20px;
  margin-bottom: 28px;
  border-radius: var(--card-radius);
  box-shadow: var(--shadow);
  font-size: 1.1rem;
}

.card h3 {
  color: var(--primary);
  margin-top: 0;
  margin-bottom: 1rem;
  font-size: 1.2rem;
  font-weight: bold;
}

.token-box {
  background-color: #f7fbff;
  border: 1.5px solid #dbeafe;
  border-radius: 10px;
  padding: 16px;
  margin-bottom: 1.2rem;
}

.no-token {
  color: #888;
  font-style: italic;
  margin-bottom: 1.2rem;
}

.store-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.store-item {
  background-color: #f7fbff;
  padding: 12px 16px;
  margin: 10px 0;
  border: 1px solid #dbeafe;
  border-radius: 10px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.store-item strong {
  color: var(--primary);
}

.btn, button[type="submit"], .delete-btn, #see, .upload-prescription {
  padding: 8px 18px;
  background-color: var(--primary);
  color: #fff;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: bold;
  cursor: pointer;
  transition: background 0.2s, opacity 0.2s;
  box-shadow: 0 2px 8px rgba(37,99,235,0.08);
  margin: 6px 0 0 0;
  display: inline-block;
}

.btn:hover, button[type="submit"]:hover, #see:hover, .upload-prescription:hover {
  background: var(--primary-dark);
  opacity: 0.95;
}

.delete-btn {
  background: var(--danger);
  margin-top: 15px;
}
.delete-btn:hover {
  background: var(--danger-dark);
}

.upload.card {
  background: #f7fbff;
  border: 1.5px solid #dbeafe;
  border-radius: 10px;
  margin-top: 20px;
  padding: 18px 12px;
  box-shadow: none;
}

.upload.card label {
  color: var(--primary);
  font-weight: bold;
}

.upload.card input[type="file"] {
  margin: 10px 0;
}

.popup-overlay, #token-popup {
  position: fixed;
  top: 0; left: 0;
  width: 100vw; height: 100vh;
  background: rgba(0, 0, 0, 0.5);
  display: none;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.popup-content {
  background: #fff;
  padding: 32px 18px 22px 18px;
  border-radius: 14px;
  text-align: center;
  width: 320px;
  font-size: 1.1rem;
  box-shadow: var(--shadow);
}

#close-popup {
  margin-top: 18px;
  background-color: var(--primary);
  color: white;
  padding: 8px 20px;
  border: none;
  border-radius: 7px;
  cursor: pointer;
  font-weight: bold;
  font-size: 1rem;
  transition: background 0.2s;
}
#close-popup:hover {
  background: var(--primary-dark);
}

#prescriptionModal {
  display: none;
  position: fixed;
  z-index: 9999;
  top: 0; left: 0;
  width: 100vw; height: 100vh;
  background-color: rgba(0, 0, 0, 0.7);
  justify-content: center;
  align-items: center;
  text-align: center;
}

#closePrescriptionModal {
  position: absolute;
  top: -20px;
  right: -20px;
  background: var(--danger);
  color: white;
  border: none;
  padding: 8px 12px;
  cursor: pointer;
  font-size: 16px;
  border-radius: 4px;
  z-index: 10001;
}
#closePrescriptionModal:hover {
  background: var(--danger-dark);
}

#presModalImage {
  max-width: 90vw;
  max-height: 80vh;
  border: 3px solid white;
  border-radius: 12px;
}
.custom-modal {
  position: fixed;
  top: 0; left: 0;
  width: 100vw; height: 100vh;
  background: rgba(0,0,0,0.45);
  display: none; /* Set to flex when shown */
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.custom-modal .modal-content {
  background: #fff;
  border-radius: 18px;
  box-shadow: 0 4px 16px rgba(37,99,235,0.08);
  padding: 2rem 1.2rem 1.2rem 1.2rem;
  width: 90vw;
  max-width: 340px;
  text-align: center;
  position: relative;
}

.custom-modal h2 {
  margin-top: 0;
  color: #2563eb;
  font-size: 1.2rem;
  font-weight: bold;
  margin-bottom: 1.2rem;
}

.custom-modal ul {
  list-style: disc inside;
  padding-left: 0;
  margin: 0 0 1.2rem 0;
  color: #2563eb;
  font-size: 1rem;
  text-align: left;
}

.custom-modal li {
  margin-bottom: 0.5rem;
  background: #f0f8ff;
  border-radius: 8px;
  padding: 0.5rem 0.7rem;
}

.custom-modal p {
  color: #555;
  font-size: 1rem;
  margin-bottom: 1.2rem;
}

.modal-close-btn {
  background: #2563eb;
  color: #fff;
  border: none;
  border-radius: 8px;
  padding: 0.7rem 0;
  font-size: 1rem;
  font-weight: bold;
  width: 100%;
  cursor: pointer;
  transition: background 0.2s;
  box-shadow: 0 2px 8px rgba(37,99,235,0.08);
}

.modal-close-btn:hover {
  background: #1746a0;
}



/* toast part */
#toast-container {
  display: none;
  position: fixed;
  z-index: 105;
  height: 60px;
  width: 90vw;
  max-width: 340px;
  bottom: 20px;
  left: 5vw;
  border-radius: 14px;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  box-shadow: var(--shadow);
}

#toast-close {
  position: absolute;
  right: 6px;
  top: 6px;
}

.toast {
  padding: 16px 10px;
  display: flex;
  align-items: center;
  gap: 20px;
}

.toast-message {
  word-break: break-word;
  font-size: 1rem;
}


  </style>
  
</head>

<body>
  <div class="sidebar">
    <div class="sidebar-header">
      <h2>User Dashboard</h2>
      <div id="cancelSidebar-button">
        <img src="/images/close.svg" style="height: 45px; cursor: pointer;" alt="close">


      </div>
    </div>

    <a href="/user">Dashboard</a>
    <a href="/auth/logout">Logout</a>
    <a href="/user/token-history">Token History</a>
  </div>


  <div class="main-content">
    <div class="nav">
      <div id="ham">
        <svg width="30" height="30" viewBox="0 0 100 80" fill="#2c3e50" xmlns="http://www.w3.org/2000/svg">
          <rect width="100" height="10" rx="6"></rect>
          <rect y="30" width="100" height="10" rx="6"></rect>
          <rect y="60" width="100" height="10" rx="6"></rect>
        </svg>
      </div>
      <div class="app">
        <h3>Smart Queue Management</h3>
        <a href="/user"><img src="/images/home.svg" style="height: 45px;" alt="home"></a>
      </div>
    </div>
    <h1>Welcome, <%= user.name %>!</h1>

    <% if (locals.user.ActiveToken) { %>
      <% const userToken=locals.userToken %>
        <!-- Active Token Section -->
        <div class="card">
          <h3>Your Active Token</h3>
          <div id="active_token" class="token-box">
            <p><strong>Token Number:</strong> <span id="tokenNumber">
                <%= userToken.tokenNumber %>
              </span></p>
            <p><strong>Store:</strong> <span id="storeName">
                <%= userToken.store.name %>
              </span></p>
            <p><strong>Status:</strong> <span id="tokenStatus">
                <%= userToken.status %>
              </span></p>
            <p><strong>Position:</strong> <span id="tokenPosition">...</span></p>
            <p><strong>Estimated Wait Time:</strong> <span id="estimatedTime">...</span> minutes</p>
          </div>
          <form action="user/token-delete" method="POST"> <button class="delete-btn">Delete Token</button></form>
         
              <!-- <label>See Out of Stock</label> -->
              <button id="see" onclick="openViewModal()">See Out of Stock</button>
        </div>


        <% if (!userToken.prescription.uploaded) { %>
          <div class="upload card">
            <form action="/user/upload-prescription/<%= userToken._id%>" method="POST" enctype="multipart/form-data">
              <label for="file">Prescription Image:</label>
              <input type="file" name="prescription" required />
              <button type="submit">UPLOAD</button>
            </form>

          </div>
          <% } else { %>
            <% const presURL= userToken.prescription.imageUrl %>
            <button class="btn" id="seePres" onclick="openModal('<%=userToken.prescription.imageUrl%>')">Prescription</button>
            <% } %>

              <!-- No Active Token -->
              <% } else { %>

                <div class="card">
                  <h3>No Active Tokens</h3>
                  <p class="no-token">You currently have no active tokens.</p>
                  <form action="/user/token" method="get">
                    <button class="btn">Book Token</button>
                  </form>
                  <p>Select a store below to generate a new token:</p>



                  <!-- List of stores -->
                  <ul class="store-list">
                    <% locals.stores.forEach(store=> { %>
                      <li class="store-item">
                        <div>
                          <strong>
                            <%= store.name %>
                          </strong><br>
                          <span>
                            <%= store.address %>
                          </span>
                        </div>
                        <form action="/user/generate-token?q=<%= store._id %>" method="POST">
                          <input type="hidden" name="storeId" value="<%= store._id %>">
                          <button class="btn" type="submit">Generate Token</button>
                        </form>
                      </li>
                      <% }) %>
                  </ul>
                </div>
                <% } %>
  </div>






  <div id="token-popup" class="popup-overlay">
    <div class="popup-content">
      <h3>🔔 Token Alert</h3>
      <p id="popup-message">Your token is about to be called!</p>
      <button id="close-popup">Close</button>
    </div>
  </div>

  <!-- Prescription Modal -->
  <div id="prescriptionModal">
    <div style="position: relative;">
      <img id="presModalImage" src="" alt="Prescription" />
      <button id="closePrescriptionModal" onclick="closeModal()">X</button>
    </div>
  </div>


  <div id="viewStockModal" class="custom-modal">
  <div class="modal-content">
    <h2>Out-of-Stock Medicines</h2>
    <% if (userToken && userToken.store.outOfStock.length > 0) { %>
      <ul>
        <% userToken.store.outOfStock.forEach(med => { %>
          <li><%= med %></li>
        <% }) %>
      </ul>
    <% } else { %>
      <p>No medicines currently marked out-of-stock.</p>
    <% } %>
    <button class="modal-close-btn" onclick="closeViewModal()">Close</button>
  </div>
</div>

<div id="toast-container"></div>



  <audio id="notify" src="/sound/notify.m4a" preload="auto"></audio>


  <script src="/socket.io/socket.io.js"></script>
  <script>

    //***********************************
    function showPopup(message, reload = false) {
      console.log("ShowPopup is working.");
      const popup = document.getElementById("token-popup");
      const message_box = document.getElementById("popup-message");
      message_box.innerText = message;
      popup.style.display = "flex";
      const audio = document.getElementById("notify");
      audio.muted = false;
      audio.play();
      toReload = reload;
    }
    document.getElementById("close-popup").addEventListener("click", () => {
      document.getElementById("token-popup").style.display = "none";
      if (toReload) {
        location.reload();
      }
    })

    function openModal(imageUrl) {
    document.getElementById('presModalImage').src = imageUrl;
    document.getElementById('prescriptionModal').style.display = 'flex';
  }


  function closeModal() {
    document.getElementById('prescriptionModal').style.display = 'none';
    document.getElementById('presModalImage').src = "";
  }

  //  out of stock modal view
  function openViewModal() {
  document.getElementById("viewStockModal").style.display = "flex";
}
function closeViewModal() {
  document.getElementById("viewStockModal").style.display = "none";
}

    let toReload = false;
    let audioPermission = false;
    document.addEventListener("click", () => {
      const audio = document.getElementById("notify");
      if (!audioPermission) {
        audioPermission = true;
        console.log("hey there");
        audio.muted = true;
        audio.play();
      }
    })
    const sidebar = document.querySelector(".sidebar");
    console.log("dom loaded");
    document.getElementById("ham").addEventListener("click", () => {
      console.log("hamburger button clicked");
      sidebar.style.left = 0;

    })
    document.getElementById("cancelSidebar-button").addEventListener("click", () => {
      sidebar.style.left = "-100%";
    })



    //***********************************


    //**************************** queue related ******************************
    const userId = "<%= locals.user._id %>";
    let curr;
    const socket = io();
    curr = "<%=JSON.stringify(locals.userToken)%>";
    socket.onAny((event, ...args) => {
      console.log(`📨 Received event: ${event}`, args);
    });
    socket.emit("join-user", userId);


    const userToken =  <%- JSON.stringify(locals.userToken || null) %>;
    if (userToken) {
      updateTokenStatus();
    }

    async function updateTokenStatus() {
      try {
        const res = await fetch(`/api/token-status/${userToken._id}`);
        const data = await res.json();

        document.getElementById("tokenStatus").innerText = data.status;
        document.getElementById("tokenPosition").innerText = data.currentPosition;
        document.getElementById("estimatedTime").innerText = data.estimatedWaitTime;

        console.log("✅ Token status updated:", data);
      } catch (err) {
        console.error("❌ Error updating token status:", err);
      }
    }


    // toast messages
    function showToast(message , type){
        const toast_container=document.getElementById("toast-container");
        if(type==1) toast_container.style.background="rgb(21 255 151)";
        else if(type==0) toast_container.style.background="rgb(255 89 82)";
        else toast_container.style.background="rgb(247 219 76)";
        toast_container.innerHTML=`<div id="toast-close" style="cursor:pointer; "  onclick="closeToast()" >
            <img style="filter: invert(1); height: 20px;" src="/images/close.svg">
        </div>
        <div class="toast">
            <div class="toast-icon">

            </div>
            <div class="toast-message">
                ${message}
            </div>
        </div>`;
        toast_container.style.display="inline-block";
        setTimeout(()=>{
            toast_container.style.display="none";
        } , 3000)
        
    }
    function closeToast(){
        document.getElementById("toast-container").style.display="none";
    }
    //
    document.addEventListener("DOMContentLoaded" , ()=>{
      console.log("i am working");
      if( "<%=locals.uploadSuccess %>"==='true') showToast("✅Prescription Uploaded Successfully." ,1);
      
    })

    socket.on("userTokenStatusChanged", (data) => {
      if (data.userId == userId) {
        console.log("**************Token status update received from admin:", data);
        showPopup(`Hello User!! Your Token is ${data.status}.`, true);
        

      }
    });

    // this event is helpful in sending messages to user when their turn is near
    socket.on("queuePositionUpdate", (data) => {
      //alert(`🔔 Your token status changed: ${data.position} , estimatedWaitTime : ${data.estimatedWaitTime}`);
      console.log(`🔔 Your token status changed: ${data.position} , estimatedWaitTime : ${data.estimatedWaitTime}`);
      document.getElementById("tokenPosition").innerText = data.position;
      document.getElementById("estimatedTime").innerText = data.estimatedWaitTime;
      if (data.position <= 3) {
        showPopup(`Hey User!! Your token is near, Position: ${data.position} Est. Wait: ${data.estimatedWaitTime}`);
      }
    })




  </script>

</body>

</html>
